{
  "info": {
    "name": "Connectivity API",
    "description": "API para verificar conectividad de red mediante ping y traceroute",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "12345678-1234-1234-1234-123456789012",
    "updatedAt": "2024-01-15T10:30:00.000Z"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status');",
              "    pm.expect(responseJson).to.have.property('timestamp');",
              "    pm.expect(responseJson).to.have.property('version');",
              "    pm.expect(responseJson.status).to.eql('healthy');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Ping Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/ping?host={{default_host}}&count={{test_count}}",
          "host": ["{{base_url}}"],
          "path": ["ping"],
          "query": [
            {
              "key": "host",
              "value": "{{default_host}}"
            },
            {
              "key": "count",
              "value": "{{test_count}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Ping response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('host');",
              "    pm.expect(responseJson).to.have.property('packets_transmitted');",
              "    pm.expect(responseJson).to.have.property('packets_received');",
              "    pm.expect(responseJson).to.have.property('packet_loss');",
              "    pm.expect(responseJson).to.have.property('min_ms');",
              "    pm.expect(responseJson).to.have.property('avg_ms');",
              "    pm.expect(responseJson).to.have.property('max_ms');",
              "    pm.expect(responseJson).to.have.property('timestamp');",
              "});",
              "",
              "pm.test('Packet loss is reasonable', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.packet_loss).to.be.below(100);",
              "});",
              "",
              "pm.test('Average response time is reasonable', function () {",
              "    const responseJson = pm.response.json();",
              "    if (responseJson.packets_received > 0) {",
              "        pm.expect(responseJson.avg_ms).to.be.above(0);",
              "        pm.expect(responseJson.avg_ms).to.be.below(1000);",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Traceroute Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/traceroute?host={{default_host}}&max_hops=15",
          "host": ["{{base_url}}"],
          "path": ["traceroute"],
          "query": [
            {
              "key": "host",
              "value": "{{default_host}}"
            },
            {
              "key": "max_hops",
              "value": "15"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Traceroute response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('host');",
              "    pm.expect(responseJson).to.have.property('hops');",
              "    pm.expect(responseJson).to.have.property('timestamp');",
              "    pm.expect(responseJson.hops).to.be.an('array');",
              "});",
              "",
              "pm.test('Hops have correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    if (responseJson.hops.length > 0) {",
              "        const firstHop = responseJson.hops[0];",
              "        pm.expect(firstHop).to.have.property('hop');",
              "        pm.expect(firstHop).to.have.property('host');",
              "        pm.expect(firstHop.hop).to.be.a('number');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Bulk Ping Test",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/ping/bulk?hosts=8.8.8.8&hosts=1.1.1.1&count=2",
          "host": ["{{base_url}}"],
          "path": ["ping", "bulk"],
          "query": [
            {
              "key": "hosts",
              "value": "8.8.8.8"
            },
            {
              "key": "hosts",
              "value": "1.1.1.1"
            },
            {
              "key": "count",
              "value": "2"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Bulk ping response has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('results');",
              "    pm.expect(responseJson).to.have.property('timestamp');",
              "    pm.expect(responseJson.results).to.be.an('array');",
              "    pm.expect(responseJson.results).to.have.length(2);",
              "});",
              "",
              "pm.test('Each result has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    responseJson.results.forEach(function(result) {",
              "        pm.expect(result).to.have.property('host');",
              "        pm.expect(result).to.have.property('packet_loss');",
              "        pm.expect(result).to.have.property('avg_ms');",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Allowed Hosts",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/allowed-hosts",
          "host": ["{{base_url}}"],
          "path": ["allowed-hosts"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has allowed hosts list', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('allowed_hosts');",
              "    pm.expect(responseJson).to.have.property('count');",
              "    pm.expect(responseJson).to.have.property('timestamp');",
              "    pm.expect(responseJson.allowed_hosts).to.be.an('array');",
              "    pm.expect(responseJson.count).to.be.above(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Invalid Host Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/ping?host=invalid-host.com&count=2",
          "host": ["{{base_url}}"],
          "path": ["ping"],
          "query": [
            {
              "key": "host",
              "value": "invalid-host.com"
            },
            {
              "key": "count",
              "value": "2"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Error message mentions not allowed', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('detail');",
              "    pm.expect(responseJson.detail).to.include('no est√° permitido');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "default_host",
      "value": "8.8.8.8",
      "type": "string"
    },
    {
      "key": "test_count",
      "value": "4",
      "type": "string"
    }
  ]
}